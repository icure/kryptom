package com.icure.kryptom.crypto.asn

import com.icure.kryptom.crypto.RsaAlgorithm
import com.icure.kryptom.crypto.RsaService
import com.icure.kryptom.crypto.defaultCryptoService
import com.icure.kryptom.utils.base64UrlDecode
import com.icure.kryptom.utils.base64UrlEncode
import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.shouldBe

class AsnToJwkConverterTest : StringSpec({
	val problemCases = listOf(
		Pair(
			"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQD2LLGJcPlJ0aDchHdiGC3yZHly6F-dJ0Oq-a2viD80u4HKj0RGCokHf9foOZp8mhMIZIzPBA0NNIJJjLVOCZbKYiI5HYBbg2qX0aso-hoaO4ovM4JR61QtUw67ep13p9NLgNeQfoEVqZqPKQW5YpAixu1k6HQUEaS02tOnlfgN8v70SpADe-FKwCKDJO7AgBwL82MC3QpYL0DVjPjPIfbq7tCOLBdJ9DV3fkVG22pQ_2a52E27jZWbvF5oL7f2Tj-0xBzrsr97e7LhIIPiORi7Pmuxc3AxbuytcBehPWeoTDGNdHMML6NWEJcEWD-V1i8gx6dA_ZmbwUSkO4IGJQ3JAgMBAAECggEBAM6BL2zcGEKUVxylAoCHSAPNxRNfWtW52knSqKBW6q6RnI8PH3ah39EqrTNhHvbnSJAByRzfiRNKuQB5yJ1t7dBYAd1nogUieIhimfIF21-mEoUF8IxHnJVo1zLt6Ko3Xkg4DJxpgl9ppv3wq5yX0dFajknXtYggRMpxxpsOcsc_KuKorKC2aSty3hO53TCxLuR-ch6B-SEQcV-Yqj8iTFYmkkseikP-YpJhLfli9vJ_HW6pSGRxF7gIrLplRizrctZJsWis6WeLn_Csrn0heMJFcHJA8ot1i_NuKz9YsTDXwbUGs_VljH9iji4u-yvgy9PfdxXgtiqfT_CFcNJQBwECgYEA_2-nFPgnDtgVXItkF0G11IOFznAnKAirnG5_ydgbFKOPjBsRk_l_Nx4G43EJpz9B1-9KlDJDzPVbtFBZwrCpuU2oM0j32aaHXx0ldcYDlHp-bCEw8hNte3GqRMgpfQLDedg5AQ__fllTy6YYFiRQMbNRZOVNWcs9VAriuRCXS08CgYEA9rfOn1vujgsfjZxyiFJRbxGaxjUv9mmyDDArPNxx0ew9GssXIpg9Yc93FR7BcZwRhogQTLHZcqDcxJpI_dR2LxMVUgGoVhcqiDwGPBvWMm3Ccb6FYEHhJaS0GPgNuus6suFM1m-zkBpSCiwyQqZw3nx1nLVILxKTdlYxSnzZ72cCgYEAgB4ZWJwqwvhApp1Hg56yu7eIGoYILb1Djf-iWrPoyU5MRoKhK24dj6Cg5d0hcWB5_vuHlZMsjJWX_HW8v7jqOAYqUibMIb-z8FHnIw5BZ2yVElkHerOh2yOkukEHBiunrep0lQLYLCBTtjZFqH1oN7VwIsIcLOiShx-6ngYjTGMCgYEAiZZPwEdAbi591jddF_DwQQSMT-TxbnXbOTjTpAk74FniacLAkCZedOGCA2E3d-gVTfUrQdoc7fQPqgRwmD2X-wClbypFel1I9tiikXrkpRLY0R3yu4-Bw8BqP1J2Nbtg7MkAVMXOWZqUDeA_1zOC1lCKNm5SZw3w9plyu5uM3hkCf0d2hfibB6wZeD_khxCvTxLPRSNB1vvnpV_2yCqOOfeYcAkKzagatIQcnkHUpAjPk5_g274zwZtvtnUWMUZT1spRQ9C4Cv4XhdhmdpesqSx5bRrzvUVNTpL8iBUyBgDKd66NmtW2IWTwMq-I6EOa0dxbLzWwLHTNrPfdOz66K3Y=",
			"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9iyxiXD5SdGg3IR3Yhgt8mR5cuhfnSdDqvmtr4g_NLuByo9ERgqJB3_X6DmafJoTCGSMzwQNDTSCSYy1TgmWymIiOR2AW4Nql9GrKPoaGjuKLzOCUetULVMOu3qdd6fTS4DXkH6BFamajykFuWKQIsbtZOh0FBGktNrTp5X4DfL-9EqQA3vhSsAigyTuwIAcC_NjAt0KWC9A1Yz4zyH26u7QjiwXSfQ1d35FRttqUP9mudhNu42Vm7xeaC-39k4_tMQc67K_e3uy4SCD4jkYuz5rsXNwMW7srXAXoT1nqEwxjXRzDC-jVhCXBFg_ldYvIMenQP2Zm8FEpDuCBiUNyQIDAQAB"
		)
	)

	"Should work with problem cases" {
		repeat(10000) {
			problemCases.forEach { (pkcs8Base64, spkiBase64) ->
				val privJwk = AsnToJwkConverter.pkcs8ToJwk(
					RsaAlgorithm.RsaEncryptionAlgorithm.OaepWithSha256,
					base64UrlDecode(pkcs8Base64)
				)
				val pubJwk = AsnToJwkConverter.spkiToJwk(
					RsaAlgorithm.RsaEncryptionAlgorithm.OaepWithSha256,
					base64UrlDecode(spkiBase64)
				)
				base64UrlEncode(AsnToJwkConverter.jwkToPkcs8(privJwk)) shouldBe pkcs8Base64
				base64UrlEncode(AsnToJwkConverter.jwkToSpki(pubJwk)) shouldBe spkiBase64
			}
		}
		TODO("Only happens occasionally")
	}

	"Converting from pkcs8/spki to jwk and back should give the same result" {
		listOf(
			RsaAlgorithm.RsaSignatureAlgorithm.PssWithSha256,
			RsaAlgorithm.RsaEncryptionAlgorithm.OaepWithSha1,
			RsaAlgorithm.RsaEncryptionAlgorithm.OaepWithSha256
		).forEach { algorithm ->
			RsaService.KeySize.entries.forEach { keySize ->
				val generatedKey = defaultCryptoService.rsa.generateKeyPair(algorithm, keySize)
				val exportedPkcs8 = defaultCryptoService.rsa.exportPrivateKeyPkcs8(generatedKey.private)
				val exportedSpki = defaultCryptoService.rsa.exportPublicKeySpki(generatedKey.public)
				val privJwk = AsnToJwkConverter.pkcs8ToJwk(algorithm, exportedPkcs8)
				val pubJwk = AsnToJwkConverter.spkiToJwk(algorithm, exportedSpki)
				TODO("""
					Have an occasional error on mingw
					MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQD2LLGJcPlJ0aDchHdiGC3yZHly6F-dJ0Oq-a2viD80u4HKj0RGCokHf9foOZp8mhMIZIzPBA0NNIJJjLVOCZbKYiI5HYBbg2qX0aso-hoaO4ovM4JR61QtUw67ep13p9NLgNeQfoEVqZqPKQW5YpAixu1k6HQUEaS02tOnlfgN8v70SpADe-FKwCKDJO7AgBwL82MC3QpYL0DVjPjPIfbq7tCOLBdJ9DV3fkVG22pQ_2a52E27jZWbvF5oL7f2Tj-0xBzrsr97e7LhIIPiORi7Pmuxc3AxbuytcBehPWeoTDGNdHMML6NWEJcEWD-V1i8gx6dA_ZmbwUSkO4IGJQ3JAgMBAAECggEBAM6BL2zcGEKUVxylAoCHSAPNxRNfWtW52knSqKBW6q6RnI8PH3ah39EqrTNhHvbnSJAByRzfiRNKuQB5yJ1t7dBYAd1nogUieIhimfIF21-mEoUF8IxHnJVo1zLt6Ko3Xkg4DJxpgl9ppv3wq5yX0dFajknXtYggRMpxxpsOcsc_KuKorKC2aSty3hO53TCxLuR-ch6B-SEQcV-Yqj8iTFYmkkseikP-YpJhLfli9vJ_HW6pSGRxF7gIrLplRizrctZJsWis6WeLn_Csrn0heMJFcHJA8ot1i_NuKz9YsTDXwbUGs_VljH9iji4u-yvgy9PfdxXgtiqfT_CFcNJQBwECgYEA_2-nFPgnDtgVXItkF0G11IOFznAnKAirnG5_ydgbFKOPjBsRk_l_Nx4G43EJpz9B1-9KlDJDzPVbtFBZwrCpuU2oM0j32aaHXx0ldcYDlHp-bCEw8hNte3GqRMgpfQLDedg5AQ__fllTy6YYFiRQMbNRZOVNWcs9VAriuRCXS08CgYEA9rfOn1vujgsfjZxyiFJRbxGaxjUv9mmyDDArPNxx0ew9GssXIpg9Yc93FR7BcZwRhogQTLHZcqDcxJpI_dR2LxMVUgGoVhcqiDwGPBvWMm3Ccb6FYEHhJaS0GPgNuus6suFM1m-zkBpSCiwyQqZw3nx1nLVILxKTdlYxSnzZ72cCgYEAgB4ZWJwqwvhApp1Hg56yu7eIGoYILb1Djf-iWrPoyU5MRoKhK24dj6Cg5d0hcWB5_vuHlZMsjJWX_HW8v7jqOAYqUibMIb-z8FHnIw5BZ2yVElkHerOh2yOkukEHBiunrep0lQLYLCBTtjZFqH1oN7VwIsIcLOiShx-6ngYjTGMCgYEAiZZPwEdAbi591jddF_DwQQSMT-TxbnXbOTjTpAk74FniacLAkCZedOGCA2E3d-gVTfUrQdoc7fQPqgRwmD2X-wClbypFel1I9tiikXrkpRLY0R3yu4-Bw8BqP1J2Nbtg7MkAVMXOWZqUDeA_1zOC1lCKNm5SZw3w9plyu5uM3hkCf0d2hfibB6wZeD_khxCvTxLPRSNB1vvnpV_2yCqOOfeYcAkKzagatIQcnkHUpAjPk5_g274zwZtvtnUWMUZT1spRQ9C4Cv4XhdhmdpesqSx5bRrzvUVNTpL8iBUyBgDKd66NmtW2IWTwMq-I6EOa0dxbLzWwLHTNrPfdOz66K3Y=
					MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQD2LLGJcPlJ0aDchHdiGC3yZHly6F-dJ0Oq-a2viD80u4HKj0RGCokHf9foOZp8mhMIZIzPBA0NNIJJjLVOCZbKYiI5HYBbg2qX0aso-hoaO4ovM4JR61QtUw67ep13p9NLgNeQfoEVqZqPKQW5YpAixu1k6HQUEaS02tOnlfgN8v70SpADe-FKwCKDJO7AgBwL82MC3QpYL0DVjPjPIfbq7tCOLBdJ9DV3fkVG22pQ_2a52E27jZWbvF5oL7f2Tj-0xBzrsr97e7LhIIPiORi7Pmuxc3AxbuytcBehPWeoTDGNdHMML6NWEJcEWD-V1i8gx6dA_ZmbwUSkO4IGJQ3JAgMBAAECggEBAM6BL2zcGEKUVxylAoCHSAPNxRNfWtW52knSqKBW6q6RnI8PH3ah39EqrTNhHvbnSJAByRzfiRNKuQB5yJ1t7dBYAd1nogUieIhimfIF21-mEoUF8IxHnJVo1zLt6Ko3Xkg4DJxpgl9ppv3wq5yX0dFajknXtYggRMpxxpsOcsc_KuKorKC2aSty3hO53TCxLuR-ch6B-SEQcV-Yqj8iTFYmkkseikP-YpJhLfli9vJ_HW6pSGRxF7gIrLplRizrctZJsWis6WeLn_Csrn0heMJFcHJA8ot1i_NuKz9YsTDXwbUGs_VljH9iji4u-yvgy9PfdxXgtiqfT_CFcNJQBwECgYEA_2-nFPgnDtgVXItkF0G11IOFznAnKAirnG5_ydgbFKOPjBsRk_l_Nx4G43EJpz9B1-9KlDJDzPVbtFBZwrCpuU2oM0j32aaHXx0ldcYDlHp-bCEw8hNte3GqRMgpfQLDedg5AQ__fllTy6YYFiRQMbNRZOVNWcs9VAriuRCXS08CgYEA9rfOn1vujgsfjZxyiFJRbxGaxjUv9mmyDDArPNxx0ew9GssXIpg9Yc93FR7BcZwRhogQTLHZcqDcxJpI_dR2LxMVUgGoVhcqiDwGPBvWMm3Ccb6FYEHhJaS0GPgNuus6suFM1m-zkBpSCiwyQqZw3nx1nLVILxKTdlYxSnzZ72cCgYEAgB4ZWJwqwvhApp1Hg56yu7eIGoYILb1Djf-iWrPoyU5MRoKhK24dj6Cg5d0hcWB5_vuHlZMsjJWX_HW8v7jqOAYqUibMIb-z8FHnIw5BZ2yVElkHerOh2yOkukEHBiunrep0lQLYLCBTtjZFqH1oN7VwIsIcLOiShx-6ngYjTGMCgYEAiZZPwEdAbi591jddF_DwQQSMT-TxbnXbOTjTpAk74FniacLAkCZedOGCA2E3d-gVTfUrQdoc7fQPqgRwmD2X-wClbypFel1I9tiikXrkpRLY0R3yu4-Bw8BqP1J2Nbtg7MkAVMXOWZqUDeA_1zOC1lCKNm5SZw3w9plyu5uM3hkCgYAAR3aF-JsHrBl4P-SHEK9PEs9FI0HW--elX_bIKo4595hwCQrNqBq0hByeQdSkCM-Tn-DbvjPBm2-2dRYxRlPWylFD0LgK_heF2GZ2l6ypLHltGvO9RU1OkvyIFTIGAMp3ro2a1bYhZPAyr4joQ5rR3FsvNbAsdM2s9907Prordg==
					MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9iyxiXD5SdGg3IR3Yhgt8mR5cuhfnSdDqvmtr4g_NLuByo9ERgqJB3_X6DmafJoTCGSMzwQNDTSCSYy1TgmWymIiOR2AW4Nql9GrKPoaGjuKLzOCUetULVMOu3qdd6fTS4DXkH6BFamajykFuWKQIsbtZOh0FBGktNrTp5X4DfL-9EqQA3vhSsAigyTuwIAcC_NjAt0KWC9A1Yz4zyH26u7QjiwXSfQ1d35FRttqUP9mudhNu42Vm7xeaC-39k4_tMQc67K_e3uy4SCD4jkYuz5rsXNwMW7srXAXoT1nqEwxjXRzDC-jVhCXBFg_ldYvIMenQP2Zm8FEpDuCBiUNyQIDAQAB
					MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9iyxiXD5SdGg3IR3Yhgt8mR5cuhfnSdDqvmtr4g_NLuByo9ERgqJB3_X6DmafJoTCGSMzwQNDTSCSYy1TgmWymIiOR2AW4Nql9GrKPoaGjuKLzOCUetULVMOu3qdd6fTS4DXkH6BFamajykFuWKQIsbtZOh0FBGktNrTp5X4DfL-9EqQA3vhSsAigyTuwIAcC_NjAt0KWC9A1Yz4zyH26u7QjiwXSfQ1d35FRttqUP9mudhNu42Vm7xeaC-39k4_tMQc67K_e3uy4SCD4jkYuz5rsXNwMW7srXAXoT1nqEwxjXRzDC-jVhCXBFg_ldYvIMenQP2Zm8FEpDuCBiUNyQIDAQAB
				""".trimIndent())
				base64UrlEncode(AsnToJwkConverter.jwkToPkcs8(privJwk)) shouldBe base64UrlEncode(exportedPkcs8)
				base64UrlEncode(AsnToJwkConverter.jwkToSpki(pubJwk)) shouldBe base64UrlEncode(exportedSpki)
			}
		}
	}
})